#define normalsFlag
//#define LIGHTS_NUM 4
//#define fogColorFlag
attribute vec3 a_position; 
attribute vec2 a_texCoord0;

#ifdef normalsFlag
attribute vec3 a_normal;
uniform mat3 u_normalMatrix;
#endif

#if LIGHTS_NUM > 0
uniform vec3  lightsPos[LIGHTS_NUM];
uniform vec3  lightsCol[LIGHTS_NUM];
uniform float lightsInt[LIGHTS_NUM];
#endif
uniform vec4 camPos;
uniform vec3 dirLightDir;
uniform vec3 dirLightCol;
uniform mat4 u_projectionViewMatrix;
uniform mat4 u_modelMatrix;

#ifdef envmapFlag
varying vec3 v_reflect;
#endif


#ifdef fogColorFlag
varying float v_fog;
#endif

varying vec2 v_texCoords;
varying vec3 v_normal;
varying vec3 v_lightDir;
varying vec3 v_eye;
varying vec3 v_pos;
varying vec3 v_lightColor;
varying float v_intensity;
				
//wrap light. this is fastest light model
float wrapLight(vec3 nor, vec3 direction){
	return dot(nor, direction) * 0.5 + 0.5;
}
void main()
{

#ifdef normalsFlag

	v_normal    = u_normalMatrix * normalize(a_normal);

#endif

	#ifdef envmapFlag
        vec4 mPosition = u_modelMatrix * vec4( a_position, 1.0 );
        vec3 nWorld = mat3( u_modelMatrix[0].xyz, u_modelMatrix[1].xyz, u_modelMatrix[2].xyz ) * a_normal;
        v_reflect = reflect( normalize( camPos.xyz - mPosition.xyz ), normalize( nWorld.xyz ) );
    #endif

	v_texCoords = a_texCoord0;

	vec4 worldPos = u_modelMatrix * vec4(a_position,1.0);

	gl_Position = u_projectionViewMatrix * worldPos; 
	vec3 pos  = worldPos.xyz;
	v_pos = pos;
	v_eye = camPos.xyz - pos;
	
#ifdef fogColorFlag
	float fog    =  length(v_eye) * camPos.w;
	fog*=fog;
	v_fog = min(fog, 1.0);
#endif

	v_lightDir   = -dirLightDir;
	v_lightColor = dirLightCol;
	v_intensity  = 1.0;
}
